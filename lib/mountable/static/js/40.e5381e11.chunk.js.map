{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/DateInput/DateInput.tsx"],"names":["DATE_FORMAT","stringsToDates","strings","map","val","Date","datesToStrings","dates","value","moment","format","DateInput","formClearHelper","FormClearHelper","state","values","initialValue","isRange","props","element","isEmpty","commitWidgetValue","source","widgetMgr","setStringArrayValue","onFormCleared","defaultValue","default","setState","fromUi","handleChange","date","Array","isArray","handleClose","getMaxDate","maxDate","max","length","toDate","undefined","storedValue","this","getStringArrayValue","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","v","width","disabled","theme","colors","fontSizes","style","minDate","min","manageFormClearListener","formId","className","label","labelVisibility","labelVisibilityProtoValueToEnum","help","TooltipIcon","content","placement","Placement","TOP_RIGHT","formatString","onChange","onClose","overrides","Popover","PLACEMENT","bottomLeft","Body","border","fadedText10","CalendarContainer","fontSize","sm","Week","Day","borderColor","$selected","transparent","PrevButton","display","alignItems","justifyContent","backgroundColor","outline","NextButton","Input","maskChar","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","paddingRight","paddingLeft","paddingBottom","paddingTop","range","React","PureComponent","withTheme"],"mappings":"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","file":"static/js/40.e5381e11.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport moment from \"moment\"\nimport { withTheme } from \"@emotion/react\"\nimport { Datepicker as UIDatePicker } from \"baseui/datepicker\"\nimport { PLACEMENT } from \"baseui/popover\"\nimport { DateInput as DateInputProto } from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/components/widgets/BaseWidget\"\nimport { Theme } from \"src/theme\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\n\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: DateInputProto\n  theme: Theme\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * An array with start and end date specified by the user via the UI. If the user\n   * didn't touch this widget's UI, the default value is used. End date is optional.\n   */\n  values: Date[]\n  /**\n   * Boolean to toggle between single-date picker and range date picker.\n   */\n  isRange: boolean\n  isEmpty: boolean\n}\n\n// Date format for communication (protobuf) support\nconst DATE_FORMAT = \"YYYY/MM/DD\"\n\n/** Convert an array of strings to an array of dates. */\nfunction stringsToDates(strings: string[]): Date[] {\n  return strings.map(val => new Date(val))\n}\n\n/** Convert an array of dates to an array of strings. */\nfunction datesToStrings(dates: Date[]): string[] {\n  return dates.map((value: Date) => moment(value as Date).format(DATE_FORMAT))\n}\n\nclass DateInput extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    values: this.initialValue,\n    isRange: this.props.element.isRange,\n    isEmpty: false,\n  }\n\n  get initialValue(): Date[] {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringArrayValue(\n      this.props.element\n    )\n    const stringArray =\n      storedValue !== undefined ? storedValue : this.props.element.default\n    return stringsToDates(stringArray)\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value: values } = this.props.element\n    this.props.element.setValue = false\n    this.setState(\n      {\n        values: values.map((v: string) => new Date(v)),\n      },\n      () => {\n        this.commitWidgetValue({ fromUi: false })\n      }\n    )\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setStringArrayValue(\n      this.props.element,\n      datesToStrings(this.state.values),\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    const defaultValue = stringsToDates(this.props.element.default)\n    this.setState({ values: defaultValue }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = ({ date }: { date: Date | Date[] }): void => {\n    this.setState(\n      {\n        values: Array.isArray(date) ? date : [date],\n        isEmpty: !date,\n      },\n      () => {\n        if (!this.state.isEmpty) this.commitWidgetValue({ fromUi: true })\n      }\n    )\n  }\n\n  private handleClose = (): void => {\n    const { isEmpty } = this.state\n    if (isEmpty) {\n      this.setState(\n        { values: stringsToDates(this.props.element.default) },\n        () => {\n          this.commitWidgetValue({ fromUi: true })\n        }\n      )\n    }\n  }\n\n  private getMaxDate = (): Date | undefined => {\n    const { element } = this.props\n    const maxDate = element.max\n\n    return maxDate && maxDate.length > 0\n      ? moment(maxDate, DATE_FORMAT).toDate()\n      : undefined\n  }\n\n  public render(): React.ReactNode {\n    const { width, element, disabled, theme, widgetMgr } = this.props\n    const { values, isRange } = this.state\n    const { colors, fontSizes } = theme\n\n    const style = { width }\n    const minDate = moment(element.min, DATE_FORMAT).toDate()\n    const maxDate = this.getMaxDate()\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stDateInput\" style={style}>\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UIDatePicker\n          formatString=\"yyyy/MM/dd\"\n          disabled={disabled}\n          onChange={this.handleChange}\n          onClose={this.handleClose}\n          overrides={{\n            Popover: {\n              props: {\n                placement: PLACEMENT.bottomLeft,\n                overrides: {\n                  Body: {\n                    style: {\n                      border: `1px solid ${colors.fadedText10}`,\n                    },\n                  },\n                },\n              },\n            },\n            CalendarContainer: {\n              style: {\n                fontSize: fontSizes.sm,\n              },\n            },\n            Week: {\n              style: {\n                fontSize: fontSizes.sm,\n              },\n            },\n            Day: {\n              style: ({ $selected }: { $selected: boolean }) => ({\n                \"::after\": {\n                  borderColor: $selected ? colors.transparent : \"\",\n                },\n              }),\n            },\n            PrevButton: {\n              style: () => ({\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              }),\n            },\n            NextButton: {\n              style: {\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              },\n            },\n            Input: {\n              props: {\n                // The default maskChar ` ` causes empty dates to display as ` / / `\n                // Clearing the maskChar so empty dates will not display\n                maskChar: null,\n\n                overrides: {\n                  Root: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      borderLeftWidth: \"1px\",\n                      borderRightWidth: \"1px\",\n                      borderTopWidth: \"1px\",\n                      borderBottomWidth: \"1px\",\n                    },\n                  },\n\n                  Input: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      paddingRight: \".5rem\",\n                      paddingLeft: \".5rem\",\n                      paddingBottom: \".5rem\",\n                      paddingTop: \".5rem\",\n                    },\n                  },\n                },\n              },\n            },\n          }}\n          value={values}\n          minDate={minDate}\n          maxDate={maxDate}\n          range={isRange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withTheme(DateInput)\n"],"sourceRoot":""}