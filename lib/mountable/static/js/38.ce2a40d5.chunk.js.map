{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/ColorPicker/ColorPicker.tsx"],"names":["ColorPicker","formClearHelper","FormClearHelper","state","value","initialValue","commitWidgetValue","source","props","widgetMgr","setStringValue","element","onFormCleared","setState","default","fromUi","onColorClose","color","storedValue","this","getStringValue","undefined","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","width","disabled","manageFormClearListener","formId","label","labelVisibility","labelVisibilityProtoValueToEnum","help","onChange","React","PureComponent"],"mappings":"gQAwIeA,E,4MAhGIC,gBAAkB,IAAIC,I,EAEhCC,MAAe,CACpBC,MAAO,EAAKC,c,EA0CNC,kBAAoB,SAACC,GAC3B,EAAKC,MAAMC,UAAUC,eACnB,EAAKF,MAAMG,QACX,EAAKR,MAAMC,MACXG,I,EAQIK,cAAgB,WACtB,EAAKC,SAAS,CAAET,MAAO,EAAKI,MAAMG,QAAQG,UAAW,kBACnD,EAAKR,kBAAkB,CAAES,QAAQ,Q,EAI7BC,aAAe,SAACC,GACtB,EAAKJ,SAAS,CAAET,MAAOa,IAAS,kBAC9B,EAAKX,kBAAkB,CAAES,QAAQ,Q,gDA3DrC,WAGE,IAAMG,EAAcC,KAAKX,MAAMC,UAAUW,eAAeD,KAAKX,MAAMG,SACnE,YAAuBU,IAAhBH,EAA4BA,EAAcC,KAAKX,MAAMG,QAAQG,U,+BAGtE,WACMK,KAAKX,MAAMG,QAAQW,SACrBH,KAAKI,qBAELJ,KAAKb,kBAAkB,CAAES,QAAQ,M,gCAIrC,WACEI,KAAKK,4B,kCAGP,WACEL,KAAKlB,gBAAgBwB,e,qCAGvB,WACuBN,KAAKX,MAAMG,QAAxBW,UAENH,KAAKI,uB,gCAIT,WAAoC,IAAD,OACzBnB,EAAUe,KAAKX,MAAMG,QAArBP,MACRe,KAAKX,MAAMG,QAAQW,UAAW,EAC9BH,KAAKN,SAAS,CAAET,UAAS,WACvB,EAAKE,kBAAkB,CAAES,QAAQ,S,oBA6BrC,WAAkC,IAAD,IACiBI,KAAKX,MAA7CG,EADuB,EACvBA,QAASe,EADc,EACdA,MAAOC,EADO,EACPA,SAAUlB,EADH,EACGA,UAC1BL,EAAUe,KAAKhB,MAAfC,MASR,OANAe,KAAKlB,gBAAgB2B,wBACnBnB,EACAE,EAAQkB,OACRV,KAAKP,eAIL,cAAC,IAAD,CACEkB,MAAOnB,EAAQmB,MACfC,gBAAiBC,YAA+B,UAC9CrB,EAAQoB,uBADsC,aAC9C,EAAyB3B,OAE3B6B,KAAMtB,EAAQsB,KACdC,SAAUf,KAAKH,aACfW,SAAUA,EACVD,MAAOA,EACPtB,MAAOA,Q,GA3FW+B,IAAMC","file":"static/js/38.ce2a40d5.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { ColorPicker as ColorPickerProto } from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport UIColorPicker from \"src/components/shared/ColorPicker\"\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: ColorPickerProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: string\n}\n\nclass ColorPicker extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): string {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setStringValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ value: this.props.element.default }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onColorClose = (color: string): void => {\n    this.setState({ value: color }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { element, width, disabled, widgetMgr } = this.props\n    const { value } = this.state\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <UIColorPicker\n        label={element.label}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        help={element.help}\n        onChange={this.onColorClose}\n        disabled={disabled}\n        width={width}\n        value={value}\n      />\n    )\n  }\n}\n\nexport default ColorPicker\n"],"sourceRoot":""}