{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrameCells.tsx","../../../streamlit/frontend/src/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrame.tsx"],"names":["ColumnType","determineColumnType","quiverType","dataTypeName","Quiver","getTypeName","columnType","Text","Boolean","includes","Number","startsWith","List","getDisplayContent","quiverCell","displayContent","format","content","contentType","replace","extractCssProperty","htmlElementId","property","cssStyle","regex","RegExp","match","exec","trim","getCellTemplate","type","readonly","style","kind","GridCellKind","data","displayData","allowOverlay","undefined","contentAlign","Bubble","Error","StyledResizableContainer","theme","width","height","minHeight","maxHeight","minWidth","maxWidth","overflow","position","resize","display","border","colors","fadedText05","scrollbarWidth","createDataFrameTheme","accentColor","primary","accentFg","white","accentLight","transparentize","borderColor","fontFamily","genericFonts","bodyFont","bgSearchResult","bgIconHeader","fadedText60","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","headerFontStyle","fontSizes","sm","baseFontStyle","editorFontSize","textDark","bodyText","textMedium","textLight","textBubble","bgCell","bgColor","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","useDataLoader","element","sort","useState","Map","columnSizes","setColumnSizes","columns","isEmpty","push","id","title","hasMenu","getTemplate","numIndices","types","index","length","numColumns","i","columnTitle","stretchColumn","useContainerWidth","grow","getColumns","map","column","has","get","numRows","dimensions","rows","onColumnResize","React","useCallback","newSize","set","getCellContent","col","row","cellTemplate","cssStyles","cellKind","Custom","cssId","themeOverride","fontColor","backgroundColor","formattedContents","notNullOrUndefined","cellData","Int32Array","JSON","parse","stringify","_key","value","fillCellTemplate","getCell","error","logError","getCellContentSorted","useColumnSort","updatedColumns","direction","updateSortingHeader","withFullScreenWrapper","containerWidth","containerHeight","setSort","useTheme","isFocused","setIsFocused","CompactSelection","empty","gridSelection","setGridSelection","dataEditorRef","useRef","onHeaderClick","sortDirection","clickedColumn","mode","Math","max","min","MIN_COLUMN_WIDTH","className","onBlur","current","ref","minColumnWidth","maxColumnWidth","rowHeight","headerHeight","freezeColumns","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","search","onHeaderClicked","onGridSelectionChange","newSelection","onMouseMove","args","experimental","scrollbarWidthOverride"],"mappings":"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","file":"static/js/39.0788557c.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  TextCell,\n  Theme as GlideTheme,\n  BooleanCell,\n  NumberCell,\n  BubbleCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { DataFrameCell, Quiver, Type as QuiverType } from \"src/lib/Quiver\"\nimport { notNullOrUndefined } from \"src/lib/utils\"\n\nexport enum ColumnType {\n  Text = \"text\",\n  Number = \"number\",\n  Boolean = \"boolean\",\n  List = \"list\",\n}\n\n/**\n * Maps the data type from Quiver to a valid column type.\n */\nexport function determineColumnType(quiverType: QuiverType): ColumnType {\n  const dataTypeName = quiverType && Quiver.getTypeName(quiverType)\n\n  let columnType = ColumnType.Text\n\n  if (!dataTypeName) {\n    // Use text column as fallback\n    columnType = ColumnType.Text\n  } else if (dataTypeName === \"bool\") {\n    columnType = ColumnType.Boolean\n  } else if ([\"int64\", \"float64\", \"range\"].includes(dataTypeName)) {\n    // The default index in pandas uses a range type.\n    columnType = ColumnType.Number\n  } else if (dataTypeName.startsWith(\"list\")) {\n    columnType = ColumnType.List\n  }\n\n  return columnType\n}\n\n/**\n * Returns either the formatted content or display value for a Quiver cell.\n */\nexport function getDisplayContent(quiverCell: DataFrameCell): string {\n  const displayContent =\n    quiverCell.displayContent ||\n    Quiver.format(quiverCell.content, quiverCell.contentType)\n\n  // Remove all line breaks\n  return displayContent.replace(/(\\r\\n|\\n|\\r)/gm, \" \")\n}\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId: The ID of the HTML element to extract the property for.\n * @param property: The css property to extract the value for.\n * @param cssStyle: The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Returns a template object representing an empty cell for a given data type.\n *\n * @param type: The type of the column.\n * @param readonly: If true, returns a read-only version of the cell template.\n * @param style: The style used for the column.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellTemplate(\n  type: ColumnType,\n  readonly: boolean,\n  style: \"normal\" | \"faded\" = \"normal\"\n): GridCell {\n  if (type === ColumnType.Text) {\n    return {\n      kind: GridCellKind.Text,\n      data: \"\",\n      displayData: \"\",\n      allowOverlay: true,\n      readonly,\n      style,\n    } as TextCell\n  }\n\n  if (type === ColumnType.Boolean) {\n    return {\n      kind: GridCellKind.Boolean,\n      data: false,\n      readonly,\n      allowOverlay: false, // no overlay possible\n      style,\n    } as BooleanCell\n  }\n\n  if (type === ColumnType.Number) {\n    return {\n      kind: GridCellKind.Number,\n      data: undefined,\n      displayData: \"\",\n      readonly,\n      allowOverlay: true,\n      contentAlign: \"right\",\n      style,\n    } as NumberCell\n  }\n\n  if (type === ColumnType.List) {\n    return {\n      kind: GridCellKind.Bubble,\n      data: [],\n      allowOverlay: true,\n      style,\n    } as BubbleCell\n  }\n\n  throw new Error(`Unsupported cell type: ${type}`)\n}\n\n/**\n * Returns the sort mode based on the given column type.\n */\nexport function getColumnSortMode(columnType: ColumnType): string {\n  if (columnType === ColumnType.Number) {\n    // Smart mode also works correctly for numbers\n    return \"smart\"\n  }\n\n  return \"default\"\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the quiver object. Different types of data will\n * result in different cell types.\n *\n * @param cellTemplate: the empty cell template from the column.\n * @param quiverCell: a dataframe cell object from Quiver.\n * @param cssStyles: optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function fillCellTemplate(\n  cellTemplate: GridCell,\n  quiverCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  let cellKind = cellTemplate.kind\n  if (cellTemplate.kind === GridCellKind.Custom) {\n    cellKind = (cellTemplate.data as any)?.kind\n\n    if (!cellKind) {\n      throw new Error(`Unable to determine cell type for custom cell.`)\n    }\n  }\n\n  if (cssStyles && quiverCell.cssId) {\n    const themeOverride = {} as Partial<GlideTheme>\n\n    // Extract and apply the font color\n    const fontColor = extractCssProperty(quiverCell.cssId, \"color\", cssStyles)\n    if (fontColor) {\n      themeOverride.textDark = fontColor\n    }\n\n    // Extract and apply the background color\n    const backgroundColor = extractCssProperty(\n      quiverCell.cssId,\n      \"background-color\",\n      cssStyles\n    )\n    if (backgroundColor) {\n      themeOverride.bgCell = backgroundColor\n    }\n\n    if (themeOverride) {\n      // Apply the background and font color in the theme override\n      cellTemplate = {\n        ...cellTemplate,\n        themeOverride,\n      }\n    }\n  }\n\n  if (cellKind === GridCellKind.Text) {\n    const formattedContents = getDisplayContent(quiverCell)\n    return {\n      ...cellTemplate,\n      data:\n        typeof quiverCell.content === \"string\" ||\n        !notNullOrUndefined(quiverCell.content) // don't use formattedContents for null/undefined\n          ? quiverCell.content\n          : formattedContents,\n      displayData: formattedContents,\n    } as TextCell\n  }\n\n  if (cellKind === GridCellKind.Number) {\n    const formattedContents = getDisplayContent(quiverCell)\n    let cellData = quiverCell.content\n\n    if (cellData instanceof Int32Array) {\n      // int values need to be extracted this way:\n      // eslint-disable-next-line prefer-destructuring\n      cellData = (cellData as Int32Array)[0]\n    }\n\n    return {\n      ...cellTemplate,\n      data: notNullOrUndefined(cellData) ? Number(cellData) : undefined,\n      displayData: formattedContents,\n    } as NumberCell\n  }\n\n  if (cellKind === GridCellKind.Boolean) {\n    return {\n      ...cellTemplate,\n      data: quiverCell.content as boolean,\n    } as BooleanCell\n  }\n\n  if (cellKind === GridCellKind.Bubble) {\n    // TODO(lukasmasuch): we use JSON.parse(JSON.stringify) here to handle type conversations to base types.\n    // This could be improved by introducing some custom code for handling type conversations.\n    return {\n      ...cellTemplate,\n      data: notNullOrUndefined(quiverCell.content)\n        ? JSON.parse(\n            JSON.stringify(quiverCell.content, (_key, value) =>\n              typeof value === \"bigint\" ? Number(value) : value\n            )\n          )\n        : [],\n    } as BubbleCell\n  }\n\n  throw new Error(`Unsupported cell kind: ${cellKind}`)\n}\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\ninterface StyledResizableContainerProps {\n  width?: number\n  height: number\n  maxWidth: number\n  minWidth: number\n  minHeight: number\n  maxHeight: number\n}\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer = styled.div<\n  StyledResizableContainerProps\n>(({ theme, width, height, minHeight, maxHeight, minWidth, maxWidth }) => ({\n  overflow: \"auto\",\n  position: \"relative\",\n  resize: \"both\",\n  display: \"inline-block\",\n  ...(width && { width: `${width}px` }),\n  minHeight: `${minHeight}px`,\n  maxHeight: `${maxHeight}px`,\n  minWidth: `${minWidth}px`,\n  maxWidth: `${maxWidth}px`,\n  height: `${height}px`,\n  border: `1px solid ${theme.colors.fadedText05}`,\n\n  \"> div\": {\n    height: \"100%\",\n    minWidth: \"100%\",\n  },\n\n  \"& .dvn-scroller\": {\n    scrollbarWidth: \"thin\",\n    [\"overflowX\" as any]: \"overlay !important\",\n    [\"overflowY\" as any]: \"overlay !important\",\n  },\n\n  // Hide the resize handle in the right corner. Resizing is still be possible.\n  \"&::-webkit-resizer\": {\n    display: \"none\",\n  },\n}))\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useState } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  GridCell,\n  GridColumn,\n  DataEditorProps,\n  DataEditorRef,\n  GridSelection,\n  CompactSelection,\n  GridMouseEventArgs,\n  Theme as GlideTheme,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort } from \"@glideapps/glide-data-grid-source\"\nimport { transparentize } from \"color2k\"\nimport { useTheme } from \"@emotion/react\"\n\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { Quiver } from \"src/lib/Quiver\"\nimport { logError } from \"src/lib/log\"\nimport { Theme } from \"src/theme\"\nimport { Arrow as ArrowProto } from \"src/autogen/proto\"\n\nimport {\n  getCellTemplate,\n  fillCellTemplate,\n  getColumnSortMode,\n  determineColumnType,\n  ColumnType,\n} from \"./DataFrameCells\"\nimport { StyledResizableContainer } from \"./styled-components\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\n\nconst ROW_HEIGHT = 35\nconst MIN_COLUMN_WIDTH = 35\nconst MAX_COLUMN_WIDTH = 650\n// Min width for the resizable table container:\n// Based on one column at minimum width + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_WIDTH = MIN_COLUMN_WIDTH + 3\n// Min height for the resizable table container:\n// Based on header + one column, and + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + 3\nconst DEFAULT_TABLE_HEIGHT = 400\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @param theme: Our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nexport function createDataFrameTheme(theme: Theme): Partial<GlideTheme> {\n  return {\n    // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n    accentColor: theme.colors.primary,\n    accentFg: theme.colors.white,\n    accentLight: transparentize(theme.colors.primary, 0.9),\n    borderColor: theme.colors.fadedText05,\n    fontFamily: theme.genericFonts.bodyFont,\n    bgSearchResult: transparentize(theme.colors.primary, 0.9),\n    // Header styling:\n    bgIconHeader: theme.colors.fadedText60,\n    fgIconHeader: theme.colors.white,\n    bgHeader: theme.colors.bgMix,\n    bgHeaderHasFocus: theme.colors.secondaryBg,\n    bgHeaderHovered: theme.colors.bgMix, // uses same color as bgHeader to deactivate the hover effect\n    textHeader: theme.colors.fadedText60,\n    textHeaderSelected: theme.colors.white,\n    headerFontStyle: `${theme.fontSizes.sm}`,\n    // Cell styling:\n    baseFontStyle: theme.fontSizes.sm,\n    editorFontSize: theme.fontSizes.sm,\n    textDark: theme.colors.bodyText,\n    textMedium: transparentize(theme.colors.bodyText, 0.2),\n    textLight: theme.colors.fadedText60,\n    textBubble: theme.colors.fadedText60,\n    bgCell: theme.colors.bgColor,\n    bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n    cellHorizontalPadding: 8,\n    cellVerticalPadding: 3,\n    // Special cells:\n    bgBubble: theme.colors.secondaryBg,\n    bgBubbleSelected: theme.colors.secondaryBg,\n    linkColor: theme.colors.linkText,\n    drilldownBorder: theme.colors.darkenedBgMix25,\n  }\n}\n\n/**\n * The GridColumn type extended with a function to get a template of the given type.\n */\ntype GridColumnWithCellTemplate = GridColumn & {\n  getTemplate(): GridCell\n  columnType: ColumnType\n}\n\n/**\n * Returns a list of glide-data-grid compatible columns based on a Quiver instance.\n */\nexport function getColumns(\n  element: ArrowProto,\n  data: Quiver\n): GridColumnWithCellTemplate[] {\n  const columns: GridColumnWithCellTemplate[] = []\n\n  if (data.isEmpty()) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push({\n      id: `empty-index`,\n      title: \"\",\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(ColumnType.Text, true, \"faded\")\n      },\n      columnType: ColumnType.Text,\n    } as GridColumnWithCellTemplate)\n    return columns\n  }\n\n  const numIndices = data.types?.index?.length ?? 0\n  const numColumns = data.columns?.[0]?.length ?? 0\n\n  for (let i = 0; i < numIndices; i++) {\n    const quiverType = data.types.index[i]\n    const columnType = determineColumnType(quiverType)\n    columns.push({\n      id: `index-${i}`,\n      // Indices currently have empty titles:\n      title: \"\",\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(columnType, true, \"faded\")\n      },\n      columnType,\n    } as GridColumnWithCellTemplate)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const columnTitle = data.columns[0][i]\n\n    const quiverType = data.types.data[i]\n    const columnType = determineColumnType(quiverType)\n\n    const stretchColumn = element.useContainerWidth || element.width\n\n    columns.push({\n      id: `column-${columnTitle}-${i}`,\n      title: columnTitle,\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(columnType, true)\n      },\n      columnType,\n      ...(stretchColumn ? { grow: 1 } : {}),\n    } as GridColumnWithCellTemplate)\n  }\n  return columns\n}\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n */\nfunction updateSortingHeader(\n  columns: GridColumnWithCellTemplate[],\n  sort: ColumnSortConfig | undefined\n): GridColumnWithCellTemplate[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataLoaderReturn = { numRows: number; numIndices: number } & Pick<\n  DataEditorProps,\n  \"columns\" | \"getCellContent\" | \"onColumnResize\"\n>\n\n/**\n * A custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n * And features that influence the data representation and column configuration\n * such as column resizing, sorting, etc.\n */\nexport function useDataLoader(\n  element: ArrowProto,\n  data: Quiver,\n  sort?: ColumnSortConfig | undefined\n): DataLoaderReturn {\n  // The columns with the corresponding empty template for every type:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const columns = getColumns(element, data).map(column => {\n    // Apply column widths from state\n    if (\n      column.id &&\n      columnSizes.has(column.id) &&\n      columnSizes.get(column.id) !== undefined\n    ) {\n      return {\n        ...column,\n        width: columnSizes.get(column.id),\n        // TODO (lukasmasuch): set grow: 0 -> currently not possible because of a bug:\n        // https://github.com/glideapps/glide-data-grid/issues/479\n      } as GridColumnWithCellTemplate\n    }\n    return column\n  })\n\n  // Number of rows of the table minus 1 for the header row:\n  const numRows = data.isEmpty() ? 1 : data.dimensions.rows - 1\n  const numIndices = data.types?.index?.length ?? 0\n\n  const onColumnResize = React.useCallback(\n    (column: GridColumn, newSize: number) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSize))\n      }\n    },\n    [columns]\n  )\n\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (data.isEmpty()) {\n        return {\n          ...getCellTemplate(ColumnType.Text, true, \"faded\"),\n          displayData: \"empty\",\n        } as GridCell\n      }\n\n      if (col > columns.length - 1) {\n        // This should never happen\n        return getCellTemplate(ColumnType.Text, true)\n      }\n\n      const cellTemplate = columns[col].getTemplate()\n      if (row > numRows - 1) {\n        // This should never happen\n        return cellTemplate\n      }\n      try {\n        // Quiver has the header in first row\n        const quiverCell = data.getCell(row + 1, col)\n        return fillCellTemplate(cellTemplate, quiverCell, data.cssStyles)\n      } catch (error) {\n        // This should not happen in read-only table.\n        logError(error)\n        return cellTemplate\n      }\n    },\n    [columns, numRows, data]\n  )\n\n  const { getCellContent: getCellContentSorted } = useColumnSort({\n    columns,\n    getCellContent,\n    rows: numRows,\n    sort,\n  })\n\n  const updatedColumns = updateSortingHeader(columns, sort)\n\n  return {\n    numRows,\n    numIndices,\n    columns: updatedColumns,\n    getCellContent: getCellContentSorted,\n    onColumnResize,\n  }\n}\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n}\n\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n}: DataFrameProps): ReactElement {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n  const theme: Theme = useTheme()\n\n  const {\n    numRows,\n    numIndices,\n    columns,\n    getCellContent,\n    onColumnResize,\n  } = useDataLoader(element, data, sort)\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n  })\n\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n\n  const onHeaderClick = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = columns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: clickedColumn,\n        direction: sortDirection,\n        mode: getColumnSortMode(\n          (clickedColumn as GridColumnWithCellTemplate).columnType\n        ),\n      } as ColumnSortConfig)\n    },\n    [sort, columns]\n  )\n\n  // Automatic table height calculation: numRows +1 because of header, and +3 pixels for borders\n  let maxHeight = Math.max((numRows + 1) * ROW_HEIGHT + 3, MIN_TABLE_HEIGHT)\n  let height = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    height = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    height = Math.min(height, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      height = maxHeight\n    }\n  }\n\n  let width // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    width = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    width = Math.min(Math.max(element.width, MIN_TABLE_WIDTH), containerWidth)\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  return (\n    <StyledResizableContainer\n      className=\"stDataFrame\"\n      width={width}\n      height={height}\n      minHeight={MIN_TABLE_HEIGHT}\n      maxHeight={maxHeight}\n      minWidth={MIN_TABLE_WIDTH}\n      maxWidth={maxWidth}\n      onBlur={() => {\n        // If the container loses focus, clear the current selection\n        if (!isFocused) {\n          setGridSelection({\n            columns: CompactSelection.empty(),\n            rows: CompactSelection.empty(),\n            current: undefined,\n          } as GridSelection)\n        }\n      }}\n    >\n      <GlideDataEditor\n        ref={dataEditorRef}\n        columns={columns}\n        rows={numRows}\n        minColumnWidth={MIN_COLUMN_WIDTH}\n        maxColumnWidth={MAX_COLUMN_WIDTH}\n        rowHeight={ROW_HEIGHT}\n        headerHeight={ROW_HEIGHT}\n        getCellContent={getCellContent}\n        onColumnResize={onColumnResize}\n        // Freeze all index columns:\n        freezeColumns={numIndices}\n        smoothScrollX={true}\n        // Only activate smooth mode for vertical scrolling for large tables:\n        smoothScrollY={numRows < 100000}\n        // Show borders between cells:\n        verticalBorder={true}\n        // Activate copy to clipboard functionality:\n        getCellsForSelection={true}\n        // Deactivate row markers and numbers:\n        rowMarkers={\"none\"}\n        // Deactivate selections:\n        rangeSelect={\"rect\"}\n        columnSelect={\"none\"}\n        rowSelect={\"none\"}\n        // Activate search:\n        keybindings={{ search: true }}\n        // Header click is used for column sorting:\n        onHeaderClicked={onHeaderClick}\n        gridSelection={gridSelection}\n        onGridSelectionChange={(newSelection: GridSelection) => {\n          setGridSelection(newSelection)\n        }}\n        theme={createDataFrameTheme(theme)}\n        onMouseMove={(args: GridMouseEventArgs) => {\n          // Determine if the dataframe is focused or not\n          if (args.kind === \"out-of-bounds\" && isFocused) {\n            setIsFocused(false)\n          } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n            setIsFocused(true)\n          }\n        }}\n        experimental={{\n          // We use an overlay scrollbar, so no need to have space for reserved for the scrollbar:\n          scrollbarWidthOverride: 1,\n        }}\n      />\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n"],"sourceRoot":""}