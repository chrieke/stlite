{"version":3,"sources":["../../../streamlit/frontend/src/components/elements/PlotlyChart/PlotlyChart.tsx"],"names":["withFullScreenWrapper","propWidth","width","element","propHeight","height","isFullScreen","generateSpec","figure","spec","JSON","parse","layout","useContainerWidth","theme","useTheme","colors","genericFonts","themeDefaults","font","color","bodyText","family","bodyFont","paper_bgcolor","bgColor","plot_bgcolor","secondaryBg","layoutWithThemeDefaults","chart","url","title","src","style","renderIFrame","config","data","frames","className","renderFigure","Error"],"mappings":";wNAuHeA,mBA/ER,YAI6B,IAH3BC,EAG0B,EAHjCC,MACAC,EAEiC,EAFjCA,QACQC,EACyB,EADjCC,OAQMC,EAAe,mBAAiBF,GAEhCG,EAAe,SAACC,GACpB,IAAMC,EAAOC,KAAKC,MAAMH,EAAOC,MAE3BH,KACFG,EAAKG,OAAOV,MAAQD,EACpBQ,EAAKG,OAAOP,OAASD,GACZD,EAAQU,oBACjBJ,EAAKG,OAAOV,MAAQD,GAGtB,IAAMa,EAAeC,cAGrB,OAFAN,EAAKG,OA+BT,SAAiCA,EAAaE,GAAoB,IACxDE,EAAyBF,EAAzBE,OAAQC,EAAiBH,EAAjBG,aAEVC,EAAgB,CACpBC,KAAM,CACJC,MAAOJ,EAAOK,SACdC,OAAQL,EAAaM,UAEvBC,cAAeR,EAAOS,QACtBC,aAAcV,EAAOW,aAIvB,OAAO,2BACFf,GADL,IAEEO,KAAK,2BACAD,EAAcC,MACdP,EAAOO,MAEZK,cAAeZ,EAAOY,eAAiBN,EAAcM,cACrDE,aAAcd,EAAOc,cAAgBR,EAAcQ,eAnDrCE,CAAwBnB,EAAKG,OAAQE,GAE5CL,GAmBT,OAAQN,EAAQ0B,OACd,IAAK,MACH,OA1CiB,SAACC,GACpB,IAAMzB,EAASD,GARW,IASpBF,EAAQD,EACd,OAAO,wBAAQ8B,MAAM,SAASC,IAAKF,EAAKG,MAAO,CAAE/B,QAAOG,YAuC/C6B,CAAa/B,EAAQ2B,KAC9B,IAAK,SACH,OApBiB,SAACtB,GACpB,IAAM2B,EAASzB,KAAKC,MAAMH,EAAO2B,QADyB,EAEzB5B,EAAaC,GAAtC4B,EAFkD,EAElDA,KAAMxB,EAF4C,EAE5CA,OAAQyB,EAFoC,EAEpCA,OAEtB,OACE,cAAC,IAAD,CAEEC,UAAU,gBACVF,KAAMA,EACNxB,OAAQA,EACRuB,OAAQA,EACRE,OAAQA,GALH/B,IAAiB,aAAe,YAchCiC,CAAapC,EAAQK,QAC9B,QACE,MAAM,IAAIgC,MAAJ,yCAA4CrC,EAAQ0B","file":"static/js/34.4c28fd43.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2019 Streamlit Inc. All rights reserved.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { useTheme } from \"@emotion/react\"\nimport { Theme } from \"src/theme\"\nimport {\n  Figure as FigureProto,\n  PlotlyChart as PlotlyChartProto,\n} from \"src/autogen/proto\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport Plot from \"react-plotly.js\"\n\nexport interface PlotlyChartProps {\n  width: number\n  element: PlotlyChartProto\n  height: number | undefined\n}\n\nexport const DEFAULT_HEIGHT = 450\n\nexport function PlotlyChart({\n  width: propWidth,\n  element,\n  height: propHeight,\n}: PlotlyChartProps): ReactElement {\n  const renderIFrame = (url: string): ReactElement => {\n    const height = propHeight || DEFAULT_HEIGHT\n    const width = propWidth\n    return <iframe title=\"Plotly\" src={url} style={{ width, height }} />\n  }\n\n  const isFullScreen = (): boolean => !!propHeight\n\n  const generateSpec = (figure: FigureProto): any => {\n    const spec = JSON.parse(figure.spec)\n\n    if (isFullScreen()) {\n      spec.layout.width = propWidth\n      spec.layout.height = propHeight\n    } else if (element.useContainerWidth) {\n      spec.layout.width = propWidth\n    }\n\n    const theme: Theme = useTheme()\n    spec.layout = layoutWithThemeDefaults(spec.layout, theme)\n\n    return spec\n  }\n\n  const renderFigure = (figure: FigureProto): ReactElement => {\n    const config = JSON.parse(figure.config)\n    const { data, layout, frames } = generateSpec(figure)\n\n    return (\n      <Plot\n        key={isFullScreen() ? \"fullscreen\" : \"original\"}\n        className=\"stPlotlyChart\"\n        data={data}\n        layout={layout}\n        config={config}\n        frames={frames}\n      />\n    )\n  }\n\n  switch (element.chart) {\n    case \"url\":\n      return renderIFrame(element.url as string)\n    case \"figure\":\n      return renderFigure(element.figure as FigureProto)\n    default:\n      throw new Error(`Unrecognized PlotlyChart type: ${element.chart}`)\n  }\n}\n\nfunction layoutWithThemeDefaults(layout: any, theme: Theme): any {\n  const { colors, genericFonts } = theme\n\n  const themeDefaults = {\n    font: {\n      color: colors.bodyText,\n      family: genericFonts.bodyFont,\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.secondaryBg,\n  }\n\n  // Fill in theme defaults where the user didn't specify layout options.\n  return {\n    ...layout,\n    font: {\n      ...themeDefaults.font,\n      ...layout.font,\n    },\n    paper_bgcolor: layout.paper_bgcolor || themeDefaults.paper_bgcolor,\n    plot_bgcolor: layout.plot_bgcolor || themeDefaults.plot_bgcolor,\n  }\n}\n\nexport default withFullScreenWrapper(PlotlyChart)\n"],"sourceRoot":""}