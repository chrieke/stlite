{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/Selectbox/Selectbox.tsx"],"names":["Selectbox","formClearHelper","FormClearHelper","state","value","initialValue","commitWidgetValue","source","props","widgetMgr","setIntValue","element","onFormCleared","setState","default","fromUi","onChange","storedValue","this","getIntValue","undefined","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","options","help","label","labelVisibility","formId","disabled","manageFormClearListener","labelVisibilityProtoValueToEnum","width","React","PureComponent"],"mappings":"4OA6IeA,E,4MArGIC,gBAAkB,IAAIC,I,EAEhCC,MAAe,CACpBC,MAAO,EAAKC,c,EA0CNC,kBAAoB,SAACC,GAC3B,EAAKC,MAAMC,UAAUC,YACnB,EAAKF,MAAMG,QACX,EAAKR,MAAMC,MACXG,I,EAQIK,cAAgB,WACtB,EAAKC,SAAS,CAAET,MAAO,EAAKI,MAAMG,QAAQG,UAAW,kBACnD,EAAKR,kBAAkB,CAAES,QAAQ,Q,EAI7BC,SAAW,SAACZ,GAClB,EAAKS,SAAS,CAAET,UAAS,kBAAM,EAAKE,kBAAkB,CAAES,QAAQ,Q,gDA1DlE,WAGE,IAAME,EAAcC,KAAKV,MAAMC,UAAUU,YAAYD,KAAKV,MAAMG,SAChE,YAAuBS,IAAhBH,EAA4BA,EAAcC,KAAKV,MAAMG,QAAQG,U,+BAGtE,WACMI,KAAKV,MAAMG,QAAQU,SACrBH,KAAKI,qBAELJ,KAAKZ,kBAAkB,CAAES,QAAQ,M,gCAIrC,WACEG,KAAKK,4B,kCAGP,WACEL,KAAKjB,gBAAgBuB,e,qCAGvB,WACuBN,KAAKV,MAAMG,QAAxBU,UAENH,KAAKI,uB,gCAIT,WAAoC,IAAD,OACzBlB,EAAUc,KAAKV,MAAMG,QAArBP,MACRc,KAAKV,MAAMG,QAAQU,UAAW,EAC9BH,KAAKL,SAAS,CAAET,UAAS,WACvB,EAAKE,kBAAkB,CAAES,QAAQ,S,oBA2BrC,WAAkC,IAAD,EAO3BG,KAAKV,MAAMG,QALbc,EAF6B,EAE7BA,QACAC,EAH6B,EAG7BA,KACAC,EAJ6B,EAI7BA,MACAC,EAL6B,EAK7BA,gBACAC,EAN6B,EAM7BA,OAN6B,EAQCX,KAAKV,MAA7BsB,EARuB,EAQvBA,SAAUrB,EARa,EAQbA,UASlB,OANAS,KAAKjB,gBAAgB8B,wBACnBtB,EACAoB,EACAX,KAAKN,eAIL,cAAC,IAAD,CACEe,MAAOA,EACPC,gBAAiBI,YAA+B,OAC9CJ,QAD8C,IAC9CA,OAD8C,EAC9CA,EAAiBxB,OAEnBqB,QAASA,EACTK,SAAUA,EACVG,MAAOf,KAAKV,MAAMyB,MAClBjB,SAAUE,KAAKF,SACfZ,MAAOc,KAAKf,MAAMC,MAClBsB,KAAMA,Q,GAhGUQ,IAAMC","file":"static/js/45.cb8d8cfa.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { Selectbox as SelectboxProto } from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport UISelectbox from \"src/components/shared/Dropdown\"\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: SelectboxProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number\n}\n\nclass Selectbox extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): number {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getIntValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setIntValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ value: this.props.element.default }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (value: number): void => {\n    this.setState({ value }, () => this.commitWidgetValue({ fromUi: true }))\n  }\n\n  public render(): React.ReactNode {\n    const {\n      options,\n      help,\n      label,\n      labelVisibility,\n      formId,\n    } = this.props.element\n    const { disabled, widgetMgr } = this.props\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      formId,\n      this.onFormCleared\n    )\n\n    return (\n      <UISelectbox\n        label={label}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          labelVisibility?.value\n        )}\n        options={options}\n        disabled={disabled}\n        width={this.props.width}\n        onChange={this.onChange}\n        value={this.state.value}\n        help={help}\n      />\n    )\n  }\n}\n\nexport default Selectbox\n"],"sourceRoot":""}