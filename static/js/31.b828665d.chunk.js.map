{"version":3,"sources":["../../../streamlit/frontend/src/components/elements/BokehChart/BokehChart.tsx"],"names":["withFullScreenWrapper","width","element","height","chartId","elementId","memoizedGetChartData","useCallback","JSON","parse","figure","memoizedUpdateChart","data","Bokeh","window","chart","document","getElementById","plot","doc","roots","references","find","e","type","undefined","chartWidth","attributes","plot_width","chartHeight","plot_height","useContainerWidth","getChartDimensions","lastChild","remove","removeAllChildNodes","embed","embed_item","useEffect","id","className"],"mappings":";sLAgIeA,mBAtFR,YAI4B,IAHjCC,EAGgC,EAHhCA,MACAC,EAEgC,EAFhCA,QACAC,EACgC,EADhCA,OAEMC,EAAO,sBAAkBF,EAAQG,WAEjCC,EAAuBC,uBAAY,WACvC,OAAOC,KAAKC,MAAMP,EAAQQ,UACzB,CAACR,IA6DES,EAAsBJ,uBApCR,SAACK,GAAqB,IAChCC,EAAUC,OAAVD,MACFE,EAAQC,SAASC,eAAeb,GAShCc,EACJN,GAAQA,EAAKO,KAAOP,EAAKO,IAAIC,OAASR,EAAKO,IAAIC,MAAMC,WACjDT,EAAKO,IAAIC,MAAMC,WAAWC,MAAK,SAACC,GAAD,MAAuB,SAAXA,EAAEC,aAC7CC,EAEN,GAAIP,EAAM,CAAC,IAAD,EAvCe,SAACA,GAE1B,IAAIQ,EAAqBR,EAAKS,WAAWC,WACrCC,EAAsBX,EAAKS,WAAWG,YAW1C,OARI3B,GAEFuB,EAAazB,EACb4B,EAAc1B,GACLD,EAAQ6B,oBACjBL,EAAazB,GAGR,CAAEyB,aAAYG,eA0BiBG,CAAmBd,GAA/CQ,EADA,EACAA,WAAYG,EADZ,EACYA,YAEhBH,EAAa,IACfR,EAAKS,WAAWC,WAAaF,GAE3BG,EAAc,IAChBX,EAAKS,WAAWG,YAAcD,GAIpB,OAAVd,KAjCsB,SAACb,GAC3B,KAAOA,EAAQ+B,WACb/B,EAAQ+B,UAAUC,SAgClBC,CAAoBpB,GAIpBF,EAAMuB,MAAMC,WAAWzB,EAAMR,MAIoB,CACnDH,EACAE,EACAD,IAUF,OAJAoC,qBAAU,WACR3B,EAAoBL,OACnB,CAACL,EAAOE,EAAQD,EAASI,EAAsBK,IAE3C,qBAAK4B,GAAInC,EAASoC,UAAU","file":"static/js/31.b828665d.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useCallback } from \"react\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { BokehChart as BokehChartProto } from \"src/autogen/proto\"\n\nexport interface BokehChartProps {\n  width: number\n  element: BokehChartProto\n  height?: number\n}\n\ndeclare global {\n  interface Window {\n    Bokeh: {\n      embed: {\n        embed_item: (data: any, chartId: string) => void\n      }\n    }\n  }\n}\n\ninterface Dimensions {\n  chartWidth: number\n  chartHeight: number\n}\n\nexport function BokehChart({\n  width,\n  element,\n  height,\n}: BokehChartProps): ReactElement {\n  const chartId = `bokeh-chart-${element.elementId}`\n\n  const memoizedGetChartData = useCallback(() => {\n    return JSON.parse(element.figure)\n  }, [element])\n\n  const getChartDimensions = (plot: any): Dimensions => {\n    // Default values\n    let chartWidth: number = plot.attributes.plot_width\n    let chartHeight: number = plot.attributes.plot_height\n\n    // if is not fullscreen and useContainerWidth==false, we should use default values\n    if (height) {\n      // fullscreen\n      chartWidth = width\n      chartHeight = height\n    } else if (element.useContainerWidth) {\n      chartWidth = width\n    }\n\n    return { chartWidth, chartHeight }\n  }\n\n  const removeAllChildNodes = (element: Node): void => {\n    while (element.lastChild) {\n      element.lastChild.remove()\n    }\n  }\n\n  const updateChart = (data: any): void => {\n    const { Bokeh } = window\n    const chart = document.getElementById(chartId)\n\n    /**\n     * When you create a bokeh chart in your python script, you can specify\n     * the width: p = figure(title=\"simple line example\", x_axis_label=\"x\", y_axis_label=\"y\", plot_width=200);\n     * In that case, the json object will contains an attribute called\n     * plot_width (or plot_heigth) inside the plot reference.\n     * If that values are missing, we can set that values to make the chart responsive.\n     */\n    const plot =\n      data && data.doc && data.doc.roots && data.doc.roots.references\n        ? data.doc.roots.references.find((e: any) => e.type === \"Plot\")\n        : undefined\n\n    if (plot) {\n      const { chartWidth, chartHeight } = getChartDimensions(plot)\n\n      if (chartWidth > 0) {\n        plot.attributes.plot_width = chartWidth\n      }\n      if (chartHeight > 0) {\n        plot.attributes.plot_height = chartHeight\n      }\n    }\n\n    if (chart !== null) {\n      removeAllChildNodes(chart)\n      // embed_item is actually an async function call, so a race condition\n      // can occur if updateChart is called twice, leading to two Bokeh charts\n      // to be embedded at the same time.\n      Bokeh.embed.embed_item(data, chartId)\n    }\n  }\n\n  const memoizedUpdateChart = useCallback(updateChart, [\n    width,\n    height,\n    element,\n  ])\n\n  // We only want useEffect to run once per prop update, because of the embed_item\n  // race condition mentioned per run. Thus we pass in all props and methods\n  // into the useEffect dependency array.\n  useEffect(() => {\n    memoizedUpdateChart(memoizedGetChartData())\n  }, [width, height, element, memoizedGetChartData, memoizedUpdateChart])\n\n  return <div id={chartId} className=\"stBokehChart\" />\n}\n\nexport default withFullScreenWrapper(BokehChart)\n"],"sourceRoot":""}